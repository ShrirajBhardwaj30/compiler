digraph "Dependencies in Yacc grammar" {
	fontsize = 14;
	page = "8,11";
	ratio = auto;
	"OB" [label="{<f0>OB}",shape=record,color=gold,style=filled];
	"CB" [label="{<f0>CB}",shape=record,color=gold,style=filled];
	"LE" [label="{<f0>LE}",shape=record,color=gold,style=filled];
	"GE" [label="{<f0>GE}",shape=record,color=gold,style=filled];
	"IF" [label="{<f0>IF}",shape=record,color=gold,style=filled];
	"DO" [label="{<f0>DO}",shape=record,color=gold,style=filled];
	"OP" [label="{<f0>OP}",shape=record,color=gold,style=filled];
	"CP" [label="{<f0>CP}",shape=record,color=gold,style=filled];
	"EQ" [label="{<f0>EQ}",shape=record,color=gold,style=filled];
	"OR" [label="{<f0>OR}",shape=record,color=gold,style=filled];
	"GT" [label="{<f0>GT}",shape=record,color=gold,style=filled];
	"LT" [label="{<f0>LT}",shape=record,color=gold,style=filled];
	"op" [label="{<f0>op|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>}}|{<class5>5|{<f5>}}|{<class6>6|{<f6>}}|{<class7>7|{<f7>}}}}",shape=record];
	"CCB" [label="{<f0>CCB}",shape=record,color=gold,style=filled];
	"OCB" [label="{<f0>OCB}",shape=record,color=gold,style=filled];
	"DEC" [label="{<f0>DEC}",shape=record,color=gold,style=filled];
	"ADD" [label="{<f0>ADD}",shape=record,color=gold,style=filled];
	"INC" [label="{<f0>INC}",shape=record,color=gold,style=filled];
	"AND" [label="{<f0>AND}",shape=record,color=gold,style=filled];
	"MOD" [label="{<f0>MOD}",shape=record,color=gold,style=filled];
	"SUB" [label="{<f0>SUB}",shape=record,color=gold,style=filled];
	"VAR" [label="{<f0>VAR}",shape=record,color=gold,style=filled];
	"NUM" [label="{<f0>NUM}",shape=record,color=gold,style=filled];
	"FOR" [label="{<f0>FOR}",shape=record,color=gold,style=filled];
	"DIV" [label="{<f0>DIV}",shape=record,color=gold,style=filled];
	"INT" [label="{<f0>INT}",shape=record,color=gold,style=filled];
	"NOT" [label="{<f0>NOT}",shape=record,color=gold,style=filled];
	"EXP" [label="{<f0>EXP}",shape=record,color=gold,style=filled];
	"DREF" [label="{<f0>DREF}",shape=record,color=gold,style=filled];
	"LONG" [label="{<f0>LONG}",shape=record,color=gold,style=filled];
	"CHAR" [label="{<f0>CHAR}",shape=record,color=gold,style=filled];
	"ELSE" [label="{<f0>ELSE}",shape=record,color=gold,style=filled];
	"TRUE" [label="{<f0>TRUE}",shape=record,color=gold,style=filled];
	"QUES" [label="{<f0>QUES}",shape=record,color=gold,style=filled];
	"LTGT" [label="{<f0>LTGT}",shape=record,color=gold,style=filled];
	"MULT" [label="{<f0>MULT}",shape=record,color=gold,style=filled];
	"TEXT" [label="{<f0>TEXT}",shape=record,color=gold,style=filled];
	"term" [label="{<f0>term|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>}}}}",shape=record];
	"expr" [label="{<f0>expr|{{<class1>1|{<f1>}}|{<class2>2|{<f2>|<f3>|<f4>}}|{<class3>3|{<f5>}}|{<class4>4|{<f6>}}|{<class5>5|{<f7>}}|{<class6>6|{<f8>|<f9>|<f10>|<f11>}}}}",shape=record];
	"IFDEF" [label="{<f0>IFDEF}",shape=record,color=gold,style=filled];
	"WHILE" [label="{<f0>WHILE}",shape=record,color=gold,style=filled];
	"COMMA" [label="{<f0>COMMA}",shape=record,color=gold,style=filled];
	"FALSE" [label="{<f0>FALSE}",shape=record,color=gold,style=filled];
	"FLOAT" [label="{<f0>FLOAT}",shape=record,color=gold,style=filled];
	"IDENT" [label="{<f0>IDENT}",shape=record,color=gold,style=filled];
	"NOTEQ" [label="{<f0>NOTEQ}",shape=record,color=gold,style=filled];
	"COLON" [label="{<f0>COLON}",shape=record,color=gold,style=filled];
	"PRINT" [label="{<f0>PRINT}",shape=record,color=gold,style=filled];
	"block" [label="{<f0>block|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>|<f4>}}|{<class4>4|{<f5>|<f6>|<f7>}}|{<class5>5|{<f8>}}|{<class6>6|{<f9>}}|{<class7>7|{<f10>}}|{<class8>8|{<f11>}}|{<class9>9|{<f12>}}|{<class10>10|{<f13>}}|{<class11>11|{<f14>}}|{<class12>12|{<f15>}}}}",shape=record];
	"IFNDEF" [label="{<f0>IFNDEF}",shape=record,color=gold,style=filled];
	"DEFINE" [label="{<f0>DEFINE}",shape=record,color=gold,style=filled];
	"DOUBLE" [label="{<f0>DOUBLE}",shape=record,color=gold,style=filled];
	"const" [label="{<f0>const|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>|<f5>|<f6>}}|{<class5>5|{<f7>|<f8>|<f9>}}}}",shape=record];
	"ASSIGN" [label="{<f0>ASSIGN}",shape=record,color=gold,style=filled];
	"BIN_OR" [label="{<f0>BIN_OR}",shape=record,color=gold,style=filled];
	"BIN_AND" [label="{<f0>BIN_AND}",shape=record,color=gold,style=filled];
	"string" [label="{<f0>string|{{<class1>1|{<f1>|<f2>|<f3>}}}}",shape=record];
	"POINTER" [label="{<f0>POINTER}",shape=record,color=gold,style=filled];
	"COMMENT" [label="{<f0>COMMENT}",shape=record,color=gold,style=filled];
	"multi_comment_block" [label="{<f0>multi_comment_block|{{<class1>1|{<f1>}}}}",shape=record];
	"BIN_NOT" [label="{<f0>BIN_NOT}",shape=record,color=gold,style=filled];
	"BIN_XOR" [label="{<f0>BIN_XOR}",shape=record,color=gold,style=filled];
	"BACKTICK" [label="{<f0>BACKTICK}",shape=record,color=gold,style=filled];
	"FUNCTION" [label="{<f0>FUNCTION}",shape=record,color=gold,style=filled];
	"BIN_LEFT" [label="{<f0>BIN_LEFT}",shape=record,color=gold,style=filled];
	"BIN_RIGHT" [label="{<f0>BIN_RIGHT}",shape=record,color=gold,style=filled];
	"if_block" [label="{<f0>if_block|{{<class1>1|{<f1>|<f2>|<f3>}}|{<class2>2|{<f4>|<f5>|<f6>}}|{<class3>3|{<f7>|<f8>|<f9>|<f10>|<f11>}}|{<class4>4|{<f12>|<f13>|<f14>|<f15>|<f16>}}}}",shape=record];
	"SYN_ERROR" [label="{<f0>SYN_ERROR}",shape=record,color=gold,style=filled];
	"arr_elem" [label="{<f0>arr_elem|{{<class1>1|{<f1>|<f2>|<f3>|<f4>}}|{<class2>2|{<f5>}}}}",shape=record];
	"WHITESPACE" [label="{<f0>WHITESPACE}",shape=record,color=gold,style=filled];
	"ADD_ASSIGN" [label="{<f0>ADD_ASSIGN}",shape=record,color=gold,style=filled];
	"MOD_ASSIGN" [label="{<f0>MOD_ASSIGN}",shape=record,color=gold,style=filled];
	"SUB_ASSIGN" [label="{<f0>SUB_ASSIGN}",shape=record,color=gold,style=filled];
	"DIV_ASSIGN" [label="{<f0>DIV_ASSIGN}",shape=record,color=gold,style=filled];
	"TERMINATOR" [label="{<f0>TERMINATOR}",shape=record,color=gold,style=filled];
	"def_block" [label="{<f0>def_block|{{<class1>1|{<f1>|<f2>|<f3>}}|{<class2>2|{<f4>|<f5>}}|{<class3>3|{<f6>|<f7>}}}}",shape=record];
	"for_block" [label="{<f0>for_block|{{<class1>1|{<f1>|<f2>|<f3>|<f4>|<f5>|<f6>|<f7>|<f8>|<f9>}}}}",shape=record];
	"bit_bi_op" [label="{<f0>bit_bi_op|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>}}|{<class5>5|{<f5>}}}}",shape=record];
	"assign_op" [label="{<f0>assign_op|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>}}|{<class5>5|{<f5>}}|{<class6>6|{<f6>}}|{<class7>7|{<f7>}}|{<class8>8|{<f8>}}|{<class9>9|{<f9>}}|{<class10>10|{<f10>}}|{<class11>11|{<f11>}}}}",shape=record];
	"bit_un_op" [label="{<f0>bit_un_op|{{<class1>1|{<f1>}}}}",shape=record];
	"data_type" [label="{<f0>data_type|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>}}|{<class5>5|{<f5>}}|{<class6>6|{<f6>|<f7>}}|{<class7>7|{<f8>|<f9>}}|{<class8>8|{<f10>|<f11>}}}}",shape=record];
	"condition" [label="{<f0>condition|{{<class1>1|{<f1>|<f2>|<f3>}}|{<class2>2|{<f4>}}|{<class3>3|{<f5>}}}}",shape=record];
	"LEFT_ASSIGN" [label="{<f0>LEFT_ASSIGN}",shape=record,color=gold,style=filled];
	"MULT_ASSIGN" [label="{<f0>MULT_ASSIGN}",shape=record,color=gold,style=filled];
	"term_block" [label="{<f0>term_block|{{<class1>1|{<f1>}}|{<class2>2|{<f2>|<f3>}}|{<class3>3|{<f4>|<f5>}}|{<class4>4|{<f6>|<f7>}}|{<class5>5|{<f8>|<f9>}}|{<class6>6|{<f10>}}|{<class7>7|{<f11>}}|{<class8>8|{<f12>|<f13>}}|{<class9>9|{<f14>}}|{<class10>10|{<f15>|<f16>}}}}",shape=record];
	"assignment" [label="{<f0>assignment|{{<class1>1|{<f1>|<f2>|<f3>}}|{<class2>2|{<f4>|<f5>|<f6>}}|{<class3>3|{<f7>}}}}",shape=record];
	"term_const" [label="{<f0>term_const|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}}}",shape=record];
	"RIGHT_ASSIGN" [label="{<f0>RIGHT_ASSIGN}",shape=record,color=gold,style=filled];
	"logic_bi_op" [label="{<f0>logic_bi_op|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>}}|{<class5>5|{<f5>}}|{<class6>6|{<f6>}}|{<class7>7|{<f7>}}|{<class8>8|{<f8>}}|{<class9>9|{<f9>}}}}",shape=record];
	"while_block" [label="{<f0>while_block|{{<class1>1|{<f1>|<f2>|<f3>}}|{<class2>2|{<f4>|<f5>|<f6>}}}}",shape=record];
	"ident_block" [label="{<f0>ident_block|{{<class1>1|{<f1>}}|{<class2>2|{<f2>|<f3>|<f4>}}}}",shape=record];
	"arith_bi_op" [label="{<f0>arith_bi_op|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>}}|{<class4>4|{<f4>}}|{<class5>5|{<f5>}}|{<class6>6|{<f6>}}}}",shape=record];
	"start_block" [label="{<f0>start_block|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}}}",shape=record];
	"print_block" [label="{<f0>print_block|{{<class1>1|{<f1>|<f2>|<f3>|<f4>}}}}",shape=record];
	"const_block" [label="{<f0>const_block|{{<class1>1|{<f1>}}|{<class2>2|{<f2>|<f3>|<f4>}}}}",shape=record];
	"logic_un_op" [label="{<f0>logic_un_op|{{<class1>1|{<f1>}}}}",shape=record];
	"arith_un_op" [label="{<f0>arith_un_op|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}}}",shape=record];
	"MULTI_COMMENT" [label="{<f0>MULTI_COMMENT}",shape=record,color=gold,style=filled];
	"BIN_AND_ASSIGN" [label="{<f0>BIN_AND_ASSIGN}",shape=record,color=gold,style=filled];
	"BIN_IOR_ASSIGN" [label="{<f0>BIN_IOR_ASSIGN}",shape=record,color=gold,style=filled];
	"BIN_XOR_ASSIGN" [label="{<f0>BIN_XOR_ASSIGN}",shape=record,color=gold,style=filled];
	"DOUBLE_BACKTICK" [label="{<f0>DOUBLE_BACKTICK}",shape=record,color=gold,style=filled];
	"arg_def_block" [label="{<f0>arg_def_block|{{<class1>1|{<f1>|<f2>|<f3>|<f4>}}|{<class2>2|{<f5>|<f6>}}}}",shape=record];
	"comment_block" [label="{<f0>comment_block|{{<class1>1|{<f1>}}}}",shape=record];
	"ternary_block" [label="{<f0>ternary_block|{{<class1>1|{<f1>|<f2>|<f3>|<f4>|<f5>|<f6>}}|{<class2>2|{<f7>|<f8>|<f9>|<f10>|<f11>|<f12>}}|{<class3>3|{<f13>|<f14>|<f15>|<f16>|<f17>}}|{<class4>4|{<f18>|<f19>|<f20>|<f21>|<f22>}}|{<class5>5|{<f23>|<f24>}}}}",shape=record];
	"data_def_block" [label="{<f0>data_def_block|{{<class1>1|{<f1>|<f2>|<f3>}}|{<class2>2|{<f4>|<f5>|<f6>|<f7>|<f8>}}}}",shape=record];
	"arr_elem_block" [label="{<f0>arr_elem_block|{{<class1>1|{<f1>}}|{<class2>2|{<f2>|<f3>|<f4>}}}}",shape=record];
	"do_while_block" [label="{<f0>do_while_block|{{<class1>1|{<f1>|<f2>|<f3>|<f4>|<f5>}}|{<class2>2|{<f6>|<f7>|<f8>|<f9>|<f10>}}}}",shape=record];
	"function_block" [label="{<f0>function_block|{{<class1>1|{<f1>|<f2>|<f3>|<f4>}}}}",shape=record];
	"ident_const_block" [label="{<f0>ident_const_block|{{<class1>1|{<f1>}}|{<class2>2|{<f2>}}|{<class3>3|{<f3>|<f4>|<f5>}}|{<class4>4|{<f6>|<f7>|<f8>}}}}",shape=record];
	"function_def_block" [label="{<f0>function_def_block|{{<class1>1|{<f1>|<f2>|<f3>|<f4>|<f5>|<f6>|<f7>|<f8>}}|{<class2>2|{<f9>|<f10>}}}}",shape=record];
	"op":f1 -> "arith_bi_op":f0;
	"op":f2 -> "arith_un_op":f0;
	"op":f3 -> "logic_bi_op":f0;
	"op":f4 -> "logic_un_op":f0;
	"op":f5 -> "bit_un_op":f0;
	"op":f6 -> "bit_bi_op":f0;
	"op":f7 -> "assign_op":f0;
	"term":f1 -> "VAR":f0;
	"term":f2 -> "POINTER":f0;
	"term":f3 -> "DREF":f0;
	"term":f4 -> "IDENT":f0;
	"expr":f1 -> "condition":f0;
	"expr":f2 -> "OP":f0;
	"expr":f3 -> "expr":f0;
	"expr":f4 -> "CP":f0;
	"expr":f5 -> "term":f0;
	"expr":f6 -> "const":f0;
	"expr":f7 -> "function_block":f0;
	"expr":f8 -> "expr":f0;
	"expr":f9 -> "OB":f0;
	"expr":f10 -> "expr":f0;
	"expr":f11 -> "CB":f0;
	"block":f1 -> "expr":f0;
	"block":f2 -> "assignment":f0;
	"block":f3 -> "block":f0;
	"block":f4 -> "block":f0;
	"block":f5 -> "OCB":f0;
	"block":f6 -> "term_block":f0;
	"block":f7 -> "CCB":f0;
	"block":f8 -> "if_block":f0;
	"block":f9 -> "while_block":f0;
	"block":f10 -> "for_block":f0;
	"block":f11 -> "comment_block":f0;
	"block":f12 -> "multi_comment_block":f0;
	"block":f13 -> "def_block":f0;
	"block":f14 -> "data_def_block":f0;
	"block":f15 -> "print_block":f0;
	"const":f1 -> "NUM":f0;
	"const":f2 -> "string":f0;
	"const":f3 -> "TEXT":f0;
	"const":f4 -> "BACKTICK":f0;
	"const":f5 -> "IDENT":f0;
	"const":f6 -> "BACKTICK":f0;
	"const":f7 -> "DOUBLE_BACKTICK":f0;
	"const":f8 -> "IDENT":f0;
	"const":f9 -> "DOUBLE_BACKTICK":f0;
	"string":f1 -> "DOUBLE_BACKTICK":f0;
	"string":f2 -> "block":f0;
	"string":f3 -> "DOUBLE_BACKTICK":f0;
	"multi_comment_block":f1 -> "MULTI_COMMENT":f0;
	"if_block":f1 -> "IF":f0;
	"if_block":f2 -> "condition":f0;
	"if_block":f3 -> "term_block":f0;
	"if_block":f4 -> "IF":f0;
	"if_block":f5 -> "expr":f0;
	"if_block":f6 -> "term_block":f0;
	"if_block":f7 -> "IF":f0;
	"if_block":f8 -> "condition":f0;
	"if_block":f9 -> "term_block":f0;
	"if_block":f10 -> "ELSE":f0;
	"if_block":f11 -> "term_block":f0;
	"if_block":f12 -> "IF":f0;
	"if_block":f13 -> "expr":f0;
	"if_block":f14 -> "term_block":f0;
	"if_block":f15 -> "ELSE":f0;
	"if_block":f16 -> "term_block":f0;
	"arr_elem":f1 -> "term":f0;
	"arr_elem":f2 -> "OB":f0;
	"arr_elem":f3 -> "expr":f0;
	"arr_elem":f4 -> "CB":f0;
	"arr_elem":f5 -> "term":f0;
	"def_block":f1 -> "DEFINE":f0;
	"def_block":f2 -> "term":f0;
	"def_block":f3 -> "expr":f0;
	"def_block":f4 -> "IFDEF":f0;
	"def_block":f5 -> "term":f0;
	"def_block":f6 -> "IFNDEF":f0;
	"def_block":f7 -> "term":f0;
	"for_block":f1 -> "FOR":f0;
	"for_block":f2 -> "OP":f0;
	"for_block":f3 -> "assignment":f0;
	"for_block":f4 -> "TERMINATOR":f0;
	"for_block":f5 -> "condition":f0;
	"for_block":f6 -> "TERMINATOR":f0;
	"for_block":f7 -> "assignment":f0;
	"for_block":f8 -> "CP":f0;
	"for_block":f9 -> "block":f0;
	"bit_bi_op":f1 -> "BIN_AND":f0;
	"bit_bi_op":f2 -> "BIN_OR":f0;
	"bit_bi_op":f3 -> "BIN_XOR":f0;
	"bit_bi_op":f4 -> "BIN_LEFT":f0;
	"bit_bi_op":f5 -> "BIN_RIGHT":f0;
	"assign_op":f1 -> "ASSIGN":f0;
	"assign_op":f2 -> "ADD_ASSIGN":f0;
	"assign_op":f3 -> "SUB_ASSIGN":f0;
	"assign_op":f4 -> "MULT_ASSIGN":f0;
	"assign_op":f5 -> "DIV_ASSIGN":f0;
	"assign_op":f6 -> "MOD_ASSIGN":f0;
	"assign_op":f7 -> "LEFT_ASSIGN":f0;
	"assign_op":f8 -> "RIGHT_ASSIGN":f0;
	"assign_op":f9 -> "BIN_AND_ASSIGN":f0;
	"assign_op":f10 -> "BIN_XOR_ASSIGN":f0;
	"assign_op":f11 -> "BIN_IOR_ASSIGN":f0;
	"bit_un_op":f1 -> "BIN_NOT":f0;
	"data_type":f1 -> "INT":f0;
	"data_type":f2 -> "LONG":f0;
	"data_type":f3 -> "CHAR":f0;
	"data_type":f4 -> "FLOAT":f0;
	"data_type":f5 -> "DOUBLE":f0;
	"data_type":f6 -> "LONG":f0;
	"data_type":f7 -> "LONG":f0;
	"data_type":f8 -> "LONG":f0;
	"data_type":f9 -> "FLOAT":f0;
	"data_type":f10 -> "LONG":f0;
	"data_type":f11 -> "DOUBLE":f0;
	"condition":f1 -> "expr":f0;
	"condition":f2 -> "op":f0;
	"condition":f3 -> "expr":f0;
	"condition":f4 -> "TRUE":f0;
	"condition":f5 -> "FALSE":f0;
	"term_block":f1 -> "block":f0;
	"term_block":f2 -> "term_block":f0;
	"term_block":f3 -> "term_block":f0;
	"term_block":f4 -> "term_block":f0;
	"term_block":f5 -> "function_def_block":f0;
	"term_block":f6 -> "function_def_block":f0;
	"term_block":f7 -> "term_block":f0;
	"term_block":f8 -> "block":f0;
	"term_block":f9 -> "TERMINATOR":f0;
	"term_block":f10 -> "do_while_block":f0;
	"term_block":f11 -> "ternary_block":f0;
	"term_block":f12 -> "condition":f0;
	"term_block":f13 -> "TERMINATOR":f0;
	"term_block":f14 -> "TERMINATOR":f0;
	"term_block":f15 -> "assignment":f0;
	"term_block":f16 -> "TERMINATOR":f0;
	"assignment":f1 -> "VAR":f0;
	"assignment":f2 -> "assign_op":f0;
	"assignment":f3 -> "expr":f0;
	"assignment":f4 -> "POINTER":f0;
	"assignment":f5 -> "assign_op":f0;
	"assignment":f6 -> "expr":f0;
	"assignment":f7 -> "WHITESPACE":f0;
	"term_const":f1 -> "term":f0;
	"term_const":f2 -> "const":f0;
	"logic_bi_op":f1 -> "EQ":f0;
	"logic_bi_op":f2 -> "NOTEQ":f0;
	"logic_bi_op":f3 -> "GT":f0;
	"logic_bi_op":f4 -> "LT":f0;
	"logic_bi_op":f5 -> "LTGT":f0;
	"logic_bi_op":f6 -> "GE":f0;
	"logic_bi_op":f7 -> "LE":f0;
	"logic_bi_op":f8 -> "AND":f0;
	"logic_bi_op":f9 -> "OR":f0;
	"while_block":f1 -> "WHILE":f0;
	"while_block":f2 -> "condition":f0;
	"while_block":f3 -> "block":f0;
	"while_block":f4 -> "WHILE":f0;
	"while_block":f5 -> "expr":f0;
	"while_block":f6 -> "block":f0;
	"ident_block":f1 -> "term":f0;
	"ident_block":f2 -> "ident_block":f0;
	"ident_block":f3 -> "COMMA":f0;
	"ident_block":f4 -> "term":f0;
	"arith_bi_op":f1 -> "ADD":f0;
	"arith_bi_op":f2 -> "SUB":f0;
	"arith_bi_op":f3 -> "MULT":f0;
	"arith_bi_op":f4 -> "DIV":f0;
	"arith_bi_op":f5 -> "MOD":f0;
	"arith_bi_op":f6 -> "EXP":f0;
	"start_block":f1 -> "function_def_block":f0;
	"start_block":f2 -> "term_block":f0;
	"print_block":f1 -> "PRINT":f0;
	"print_block":f2 -> "expr":f0;
	"print_block":f3 -> "GT":f0;
	"print_block":f4 -> "const":f0;
	"const_block":f1 -> "const":f0;
	"const_block":f2 -> "const_block":f0;
	"const_block":f3 -> "COMMA":f0;
	"const_block":f4 -> "const":f0;
	"logic_un_op":f1 -> "NOT":f0;
	"arith_un_op":f1 -> "INC":f0;
	"arith_un_op":f2 -> "DEC":f0;
	"arg_def_block":f1 -> "data_type":f0;
	"arg_def_block":f2 -> "term":f0;
	"arg_def_block":f3 -> "COMMA":f0;
	"arg_def_block":f4 -> "arg_def_block":f0;
	"arg_def_block":f5 -> "data_type":f0;
	"arg_def_block":f6 -> "term":f0;
	"comment_block":f1 -> "COMMENT":f0;
	"ternary_block":f1 -> "condition":f0;
	"ternary_block":f2 -> "QUES":f0;
	"ternary_block":f3 -> "block":f0;
	"ternary_block":f4 -> "COLON":f0;
	"ternary_block":f5 -> "block":f0;
	"ternary_block":f6 -> "TERMINATOR":f0;
	"ternary_block":f7 -> "expr":f0;
	"ternary_block":f8 -> "QUES":f0;
	"ternary_block":f9 -> "block":f0;
	"ternary_block":f10 -> "COLON":f0;
	"ternary_block":f11 -> "block":f0;
	"ternary_block":f12 -> "TERMINATOR":f0;
	"ternary_block":f13 -> "condition":f0;
	"ternary_block":f14 -> "QUES":f0;
	"ternary_block":f15 -> "expr":f0;
	"ternary_block":f16 -> "COLON":f0;
	"ternary_block":f17 -> "expr":f0;
	"ternary_block":f18 -> "expr":f0;
	"ternary_block":f19 -> "QUES":f0;
	"ternary_block":f20 -> "expr":f0;
	"ternary_block":f21 -> "COLON":f0;
	"ternary_block":f22 -> "expr":f0;
	"ternary_block":f23 -> "term_block":f0;
	"ternary_block":f24 -> "ternary_block":f0;
	"data_def_block":f1 -> "data_type":f0;
	"data_def_block":f2 -> "arr_elem_block":f0;
	"data_def_block":f3 -> "TERMINATOR":f0;
	"data_def_block":f4 -> "data_type":f0;
	"data_def_block":f5 -> "arr_elem_block":f0;
	"data_def_block":f6 -> "ASSIGN":f0;
	"data_def_block":f7 -> "expr":f0;
	"data_def_block":f8 -> "TERMINATOR":f0;
	"arr_elem_block":f1 -> "arr_elem":f0;
	"arr_elem_block":f2 -> "arr_elem":f0;
	"arr_elem_block":f3 -> "COMMA":f0;
	"arr_elem_block":f4 -> "arr_elem_block":f0;
	"do_while_block":f1 -> "DO":f0;
	"do_while_block":f2 -> "block":f0;
	"do_while_block":f3 -> "WHILE":f0;
	"do_while_block":f4 -> "condition":f0;
	"do_while_block":f5 -> "TERMINATOR":f0;
	"do_while_block":f6 -> "DO":f0;
	"do_while_block":f7 -> "block":f0;
	"do_while_block":f8 -> "WHILE":f0;
	"do_while_block":f9 -> "expr":f0;
	"do_while_block":f10 -> "TERMINATOR":f0;
	"function_block":f1 -> "IDENT":f0;
	"function_block":f2 -> "OP":f0;
	"function_block":f3 -> "ident_const_block":f0;
	"function_block":f4 -> "CP":f0;
	"ident_const_block":f1 -> "ident_block":f0;
	"ident_const_block":f2 -> "const_block":f0;
	"ident_const_block":f3 -> "ident_block":f0;
	"ident_const_block":f4 -> "COMMA":f0;
	"ident_const_block":f5 -> "const_block":f0;
	"ident_const_block":f6 -> "const_block":f0;
	"ident_const_block":f7 -> "COMMA":f0;
	"ident_const_block":f8 -> "ident_block":f0;
	"function_def_block":f1 -> "FUNCTION":f0;
	"function_def_block":f2 -> "IDENT":f0;
	"function_def_block":f3 -> "OP":f0;
	"function_def_block":f4 -> "arg_def_block":f0;
	"function_def_block":f5 -> "CP":f0;
	"function_def_block":f6 -> "OCB":f0;
	"function_def_block":f7 -> "term_block":f0;
	"function_def_block":f8 -> "CCB":f0;
	"function_def_block":f9 -> "function_def_block":f0;
	"function_def_block":f10 -> "function_def_block":f0;


}
